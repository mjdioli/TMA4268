knitr::opts_chunk$set(echo = TRUE)
ds = read.csv("https://web.stanford.edu/~hastie/CASI_files/DATA/diabetes.csv", sep = ",")
knitr::opts_chunk$set(echo = TRUE)
ds = read.csv("https://web.stanford.edu/~hastie/CASI_files/DATA/diabetes.csv", sep = ",")
reduced = lm(prog ~ sex + bmi + map + hdl + ltg, data = ds)
summary(reduced)
pvalues = scan("https://www.math.ntnu.no/emner/TMA4267/2018v/pvalues.txt")
pvalues
'?'(filter)
'?'(sort)
'?'(which)
knitr::opts_chunk$set(echo = TRUE)
ds = read.csv("https://web.stanford.edu/~hastie/CASI_files/DATA/diabetes.csv", sep = ",")
reduced = lm(prog ~ sex + bmi + map + hdl + ltg, data = ds)
summary(reduced)
pvalues = scan("https://www.math.ntnu.no/emner/TMA4267/2018v/pvalues.txt")
length(pvalues)
crit_pval = pvalues[!pvalues > 0.05]
length(crit_pval)
cutoff = 0.05/length(pvalues)
cutoff
crit_pval_fwere = pvalues[!pvalues > cutoff]
crit_pval_fwer
cutoff = 0.05/length(pvalues)
cutoff
crit_pval_fwer = pvalues[!pvalues > cutoff]
crit_pval_fwer
length(crit_pval)
x = function(pvalues, cutoff){
crit_pval = pvalues[!pvalues > 0.05]
TP = 0
TN = 0
FN = 0
FP = 0
for(i in 1:900){
for(value in crit_pval){
if(pvalues[i]==value){
TP = TP +1
}
else{
FN = FN +1
}
}
}
for(i in 901:1000){
for(value in crit_pval){
if(pvalues[i]==value){
FP = FP +1
}
else{
TN = TN +1
}
}
}
return (TP, TN, FN, FP)
}
x(pvalues, 0.05)
x = function(pvalues, cutoff){
crit_pval = pvalues[!pvalues > 0.05]
TP = 0
TN = 0
FN = 0
FP = 0
for(i in 1:900){
for(value in crit_pval){
if(pvalues[i]==value){
TP = TP +1
}
else{
FN = FN +1
}
}
}
for(i in 901:1000){
for(value in crit_pval){
if(pvalues[i]==value){
FP = FP +1
}
else{
TN = TN +1
}
}
}
cm = c(TP, TN, FN, FP)
return (cm)
}
x(pvalues, 0.05)
x(pvalues, cutoff)
x = function(pvalues, cutoff){
crit_pval = pvalues[!pvalues > 0.05]
TP = 0
TN = 0
FN = 0
FP = 0
for(i in 1:900){
right = FALSE
for(value in crit_pval){
if(pvalues[i]==value){
right = TRUE
}
if(right){
TP = TP +1
}
else{
FN = FN +1
}
}
}
for(i in 901:1000){
right = FALSE
for(value in crit_pval){
if(pvalues[i]==value){
right = TRUE
}
if(right){
FP = FP +1
}
else{
TN = TN +1
}
}
}
cm = c(TP, TN, FN, FP)
return (cm)
}
x(pvalues, 0.05)
x(pvalues, cutoff)
x = function(pvalues, cutoff){
crit_pval = pvalues[!pvalues > 0.05]
TP = 0
TN = 0
FN = 0
FP = 0
for(i in 1:900){
right = FALSE
for(value in crit_pval){
if(pvalues[i]==value){
right = TRUE
}
}
if(right){
TP = TP +1
}
else{
FN = FN +1
}
}
for(i in 901:1000){
right = FALSE
for(value in crit_pval){
if(pvalues[i]==value){
right = TRUE
}
}
if(right){
FP = FP +1
}
else{
TN = TN +1
}
}
cm = c(TP, TN, FN, FP)
return (cm)
}
x(pvalues, 0.05)
x(pvalues, cutoff)
x = function(pvalues, cutoff){
crit_pval = pvalues[!pvalues > cutoff]
TP = 0
TN = 0
FN = 0
FP = 0
for(i in 1:900){
right = FALSE
for(value in crit_pval){
if(pvalues[i]==value){
right = TRUE
}
}
if(right){
TP = TP +1
}
else{
FN = FN +1
}
}
for(i in 901:1000){
right = FALSE
for(value in crit_pval){
if(pvalues[i]==value){
right = TRUE
}
}
if(right){
FP = FP +1
}
else{
TN = TN +1
}
}
cm = c(TP, TN, FN, FP)
return (cm)
}
x(pvalues, 0.05)
x(pvalues, cutoff)
install.packages("caret")
install.packages("tree")
install.packages("pROC")
install.packages("RandomForest")
install.packages("corrplot")
install.packages("knitr")
install.packages("e1071")
install.packages("keras")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error=FALSE)
knitr::opts_chunk$set(warning=FALSE)
knitr::opts_chunk$set(message=FALSE)
knitr::opts_chunk$set(results="hold")
install.packages("knitr") #probably already installed
install.packages("rmarkdown") #probably already installed
install.packages("bestglm")# for subset selection with categorical variables
install.packages("glmnet")# for lasso
install.packages("tree") #tree
install.packages("knitr")
install.packages("rmarkdown")
install.packages("randomForest") #for random forest
install.packages("ElemStatLearn") #dataset in Problem 2
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error=FALSE)
knitr::opts_chunk$set(warning=FALSE)
knitr::opts_chunk$set(message=FALSE)
knitr::opts_chunk$set(results="hold")
install.packages("ggplot2")
install.packages("GGally") # for ggpairs
install.packages("caret") #for confusion matrices
install.packages("pROC") #for ROC curves
install.packages("e1071") # for support vector machines
install.packages("nnet") # for feed forward neural networks
library(GGally)
ggpairs(all::price,lower = list(combo = wrap(ggally_facethist, binwidth = 0.5)))
all=dget("https://www.math.ntnu.no/emner/TMA4268/2019v/data/diamond.dd")
dtrain=all$dtrain
dtest=all$dtest
library(GGally)
ggpairs(all::price,lower = list(combo = wrap(ggally_facethist, binwidth = 0.5)))
library(GGally)
ggpairs(all,lower = list(combo = wrap(ggally_facethist, binwidth = 0.5)))
all=dget("https://www.math.ntnu.no/emner/TMA4268/2019v/data/diamond.dd")
dtrain=all$dtrain
dtest=all$dtest
all
pring(all)
print(all)
library(GGally)
ggpairs(dtrain,lower = list(combo = wrap(ggally_facethist, binwidth = 0.5)))
install.packages("ssh")
knitr::opts_chunk$set(echo = TRUE)
session <- ssh_connect('mjdioli@markov.math.ntnu.no')
session <- ssh_connect('mjdioli@markov.math.ntnu.no')
session <- ssh_connect('mjdioli@markov.math.ntnu.no')
library(ssh)
install.packages("ssh")
library("ssh", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
session <- ssh_connect('mjdioli@markov.math.ntnu.no')
session <- ssh_connect('mjdioli@markov.math.ntnu.no')
session <- ssh_connect('amirah@markov.math.ntnu.no')
session <- ssh_connect('amirah@markov.math.ntnu.no')
session <- ssh_connect('mjdioli@markov.math.ntnu.no')
ggpairs(dtrain,lower = list(combo = wrap(ggally_facethist, binwidth = 0.5)))
library(GGally)
ggpairs(dtrain,lower = list(combo = wrap(ggally_facethist, binwidth = 2)))
